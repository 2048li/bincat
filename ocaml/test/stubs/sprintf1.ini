[settings]
mem_model = flat
mode = protected
call_conv = cdecl
mem_sz = 32
op_sz = 32
stack_width = 32

[GDT]
#Linux 32-bits
GDT[1] = 0x00cf9b000000ffff
GDT[2] = 0x00cf93000000ffff
GDT[3] = 0x00cffb000000ffff
GDT[4] = 0x00cff3000000ffff
GDT[5] = 0x80008b04200020ab
GDT[6] = 0xffc093dff0000001
GDT[7] = 0x0040f30000000fff
GDT[8] = 0x0000f2000400ffff

[loader]
cs = 0x1b
ds = 0x23
ss = 0x23
es = 0x23
fs = 0x3b
gs = 0x00
# Starting point of the analysis
analysis_ep = 0x00
# Virtual address of the code section
code_va = 0x00
#physical address (offset) of the code section
code_phys = 0x00
#side of the code section
code_length = 0x19

[binary]
filepath = sprintf.bin
format = pe


[analyzer]
ini_version = 1
unroll = 5
dotfile = out.dot
loglevel = 4
store_marshalled_cfa = true
in_marshalled_cfa_file = incfa.marshal
out_marshalled_cfa_file = outcfa.marshal
analysis = forward_binary

[state]
reg[eax] = 0x01 ! 0xff ? 0xf0
reg[ebx] = 0x12 ? 0x60
reg[ecx] = 0x23 ! 0x60
reg[edi] = 0x34 
reg[esi] = 0x45
reg[edx] = 0xaa55aa55 ? 0xf0f0f0f0 ! 0xffffffff
reg[esp] = 0x2008
reg[ebp] = 0x77

#here addresses are supposed to be absolute and not of the form ds:o
stack[0x2000] = 0x1234567812345678 ! 0xff
stack[0x2008] = 0xFFFFFFFF
mem[0x01] = 0xf1
mem[0x12] = 0xf2
mem[0x23] = 0xf3
mem[0x34] = 0xf4
mem[0x45] = 0xf5
mem[0x56] = 0xf5
# mem[0x100030a] = 0xd6
mem[0x77] = 0xf7
mem[0x71] = 0x12
mem[0x100] = 0xa5 ! 0xf0
# value=%x
mem[0x200] = |616263645b25303132785d5b25303135585d0a00|

[libc]
#tainting rules for libc
#default calling convention for this lib
# call_conv = fastcall
* = open(@, _)
#read uses a different calling convention
* = read<stdcall>(@, *, @)

[imports]
0x80000000 = all,"sprintf"
headers = libc.no
