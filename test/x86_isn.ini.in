# used as a template for tests
[settings]
mode = protected
call_conv = cdecl
mem_sz = 32
op_sz = 32
stack_width = 32

[x86]
#Linux 32-bits
mem_model = flat
GDT[1] = 0x00cf9b000000ffff
GDT[2] = 0x00cf93000000ffff
GDT[3] = 0x00cffb000000ffff
GDT[4] = 0x00cff3000000ffff
GDT[5] = 0x80008b04200020ab
GDT[6] = 0xffc093dff0000001
GDT[7] = 0x0040f30000000fff
GDT[8] = 0x0000f2000400ffff
cs = 0x1b
ds = 0x23
ss = 0x23
es = 0x23
fs = 0x3b
gs = 0x00

[loader]
# Starting point of the analysis
analysis_ep = 0x00
# Virtual address of the code section
code_va = 0x00
#physical address (offset) of the code section
code_phys = 0x00
#side of the code section
code_length = {code_length}

[binary]
filepath = {filepath}
format = pe


[analyzer]
ini_version = 1
unroll = 150
dotfile = out.dot
loglevel = 4
store_marshalled_cfa = true
in_marshalled_cfa_file = incfa.marshal
out_marshalled_cfa_file = outcfa.marshal
analysis = forward_binary

[state]
reg[cf] = 0?1
reg[of] = 0?1
reg[zf] = 0?1
reg[sf] = 0?1
reg[pf] = 0?1
reg[af] = 0?1
reg[tf] = 0?1
reg[if] = 0?1
reg[df] = 0?1
reg[iopl] = 0?1
reg[nt] = 0?1
reg[rf] = 0?1
reg[vm] = 0?1
reg[ac] = 0?1
reg[vif] = 0?1
reg[vip] = 0?1
reg[id] = 0?1
reg[eax] = 0
reg[ebx] = 0
reg[ecx] = 0
reg[edi] = 0
reg[esi] = 0
reg[edx] = 0
reg[esp] = 0x2000
reg[ebp] = 0x2000

#here addresses are supposed to be absolute and not of the form ds:o
stack[0x1000*8192] = |00|?0xFF

[override]
{overrides}

[libc]
#tainting rules for libc
#default calling convention for this lib
# call_conv = fastcall
* = open(@, _)
#read uses a different calling convention
* = read<stdcall>(@, *, @)


